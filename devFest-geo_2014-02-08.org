#+title: Working with geo-spatial data in R
#+author: John Henderson
#+email: jw.hendy@gmail.com
#+date: 08 February 2014
#+setupfile: "~/org/aux/beamer-setup.org"
#+startup: beamer
#+latex_class_options: [sans,aspectratio=169,presentation,bigger,fleqn]
#+options: H:1
#+latex_header: \usepackage{lmodern}
#+latex_header: \usetheme[alternativetitlepage=true,titleline=true]{Torino}
#+latex_header: \usecolortheme{freewilly}


* Setup								   :noexport:

#+begin_src R :session r :results silent :exports none
# install all of the following if you don't have them
library(ggmap)
library(maps)
library(geosphere)
library(rgdal)
library(maptools)
library(ggplot2)
library(plyr)
#+end_src

* Intro

- Rapid fire overview of geo-spatial miscellany in =R=
- If you're not familiar with =R=, don't worry about the code
- The code/data necessary to reproduce anything in this talk is all on [[https://github.com/jwhendy/devFest-geo][github]]!
  - https://github.com/jwhendy/devFest-geo

\vspace{1cm} \pause

*My goal*

Show you enough relatively cool things in 15min to entice you to give =R= a shot!

* Using =ggmap= to get lat/lon coordinates
- Just use what you would type into Google Maps


#+latex: \scriptsize

#+begin_src R :session r :exports both :results output :eval no :tangle yes
  # install.packages("ggmap")
  library(ggmap)
  geocode("St. Paul, MN")
#+end_src
#+RESULTS:
:         lon     lat
: 1 -93.08996 44.9537

#+begin_src R :session r :exports both :results output :eval no :tangle yes
  geocode("2115 Summit Ave., St. Paul, MN")
#+end_src
#+RESULTS:
:         lon      lat
: 1 -93.18971 44.94412

#+begin_src R :session r :exports both :results output :eval no :tangle yes
  geocode("University of St. Thomas, MN")
#+end_src
#+RESULTS:
:         lon      lat
: 1 -93.18975 44.94192

#+latex: \normalsize
* Grabbing maps

Methods
- Lat/lon + zoom level
- Bounding box

Sources
- Google
- Stamen
- Cloudmade
- OpenStreetMap

* Using lat/lon + zoom

#+header: :file ./plots/ust-coords-zoom.pdf :width 8 :height 8
#+begin_src R :session r :exports code :results silent :eval no :tangle yes

loc <- geocode("2115 Summit Ave, St. Paul, MN")
ust <- get_map(location = c(lon = loc$lon, lat = loc$lat),
                zoom = 15, source = "google",
                maptype = "hybrid", crop = T)

ggmap(ust)

#+end_src

* Using lat/lon + zoom

#+begin_center
#+attr_latex: :height 6.5cm
[[./plots/ust-coords-zoom.pdf]]
#+end_center

* Using lat/lon + bounding box

#+header: :file ./plots/ust-coords-box.pdf :width 8 :height 6
#+begin_src R :session r :exports code :results output graphics :eval no :tangle yes

loc <- geocode("2115 Summit Ave, St. Paul, MN")

box <- c(left = loc$lon - 0.04, bottom = loc$lat - 0.02,
         right = loc$lon + 0.04, top = loc$lat + 0.02)

ust_box <- get_map(location = box, source = "stamen",
                   maptype = "watercolor", crop = T)

ggmap(ust_box)

#+end_src

#+RESULTS:
[[file:./plots/ust-coords-box.pdf]]

* Using lat/lon + bounding box

#+begin_center
#+attr_latex: :height 6.5cm
[[./plots/ust-coords-box.pdf]]
#+end_center

* Overplotting maps

- =ggmap()= adds onto existing =ggplot2= functionality
- Thus, layering standard =ggplot2= graphics on top of maps is easy!

#+latex: \scriptsize
#+header: :file ./plots/ggmap-points.pdf :height 6 :width 9
#+begin_src R :session r :exports code :results output graphics :eval no :tangle yes
locs <- data.frame(names = c("st. paul", "minneapolis"))                  # grab locations
locs <- cbind(locs, geocode(as.character(locs$names)))

mid <- get_map(location = c(lon = mean(locs$lon), lat = mean(locs$lat)),  # get a map
               zoom = 10, source = "stamen", maptype = "toner", crop = T)

p <- ggmap(mid)                                                           # plot map
p <- p + geom_point(aes(x = lon, y = lat, colour = factor(names)),        # overplot w/ points
                    dat = locs, size = 6)
p <- p + scale_colour_discrete("Location")
#+end_src

#+latex: \normalsize

* Overplotting ggmaps

#+begin_center
#+attr_latex: :height 6.5cm
[[./plots/ggmap-points.pdf]]
#+end_center

* Working with world/country maps

- =get_map()= limited by allowable zoom levels (e.g. =0 < zoom < 21=)
- For larger scale data, the =maps= package is necessary
- Various maps available; see the [[http://cran.r-project.org/web/packages/maps/maps.pdf][documentation]] 

#+latex: \scriptsize
#+begin_src R :session r :exports both :results output :eval no :tangle yes

library(maps)
world <- map_data("world")
head(map, 5)

#+end_src

#+RESULTS:
:        long      lat group order region subregion
: 1 -133.3664 58.42416     1     1 Canada      <NA>
: 2 -132.2681 57.16308     1     2 Canada      <NA>
: 3 -132.0498 56.98610     1     3 Canada      <NA>
: 4 -131.8797 56.74001     1     4 Canada      <NA>
: 5 -130.2492 56.09945     1     5 Canada      <NA>

* World map example

#+latex: \scriptsize
#+name: world-map
#+header: :file ./plots/world.pdf :width 9 :height 6
#+begin_src R :session r :exports both :results output graphics :eval no :tangle yes
# pay attention to column names (long vs. lon!)
p <- ggplot(world, aes(x = long, y = lat, group = group))
p <- p + geom_polygon(colour = "white")
p
#+end_src

#+begin_center
#+attr_latex: :height 4.5cm
#+RESULTS: world-map
[[file:./plots/world.pdf]]
#+end_center

#+latex: \normalsize

* United States example

#+latex: \scriptsize
#+name: usa-map
#+header: :file ./plots/usa.pdf :width 9 :height 6
#+begin_src R :session r :exports both :results output graphics :eval no :tangle yes
usa <- map_data("state")
p <- ggplot(usa, aes(x = long, y = lat, group = group))
p <- p + geom_polygon(colour = "white")
p
#+end_src

#+begin_center
#+attr_latex: :height 4.5cm
#+RESULTS: usa-map
[[file:./plots/usa.pdf]]
#+end_center

#+latex: \normalsize

* Subsetting areas

#+latex: \scriptsize
#+name: some-states
#+header: :file ./plots/some-states.pdf :width 6 :height 6
#+begin_src R :session r :exports code :results graphics :eval no :tangle yes
states <- c("minnesota", "wisconsin", "illinois", "indiana",
            "iowa", "missouri", "michigan")

states_map <- map_data("state")

states_map <- states_map[states_map$region %in% states, ]

p <- ggplot(states_map, aes(x = long, y = lat, group = group))
p <- p + geom_polygon(colour = "white")
p
#+end_src

* Subsetting areas

#+begin_center
#+attr_latex: :height 6cm
[[file:./plots/some-states.pdf]]
#+end_center

* A hobby project

- Internal talks at 3M typically given live to US audience; recorded for int'l
- Organized two "reverse talks" to reach a wider global audience
- Attendance records shattered
- Wanted to visualize impact/reach!

* The inspiration

#+begin_center
#+attr_latex: :height 6cm
[[./img/facebook-map-lo.png]]
#+end_center

* Calculating great circle arcs

- =gcIntermediate()= function from  =geosphere= package

#+latex: \scriptsize
#+begin_src R :eval no :tangle yes
library(geosphere)
arc <- gcIntermediate(c(lon_1, lat_1), c(lon_2, lat_2),
                      n = steps, addStartEnd = T)
#+end_src

* Crossing the Date Line

#+latex: \scriptsize
#+begin_src R :eval no :tangle yes :exports code
# draw great circles from St. Paul to everywhere else
gcircles <- lapply(1:nrow(end), function(i) {                 # arc for each set
  temp <- gcIntermediate(start[, c("lon", "lat")],
                         end[i, c("lon", "lat")],
                         n = 50, addStartEnd = T,
                         breakAtDateLine = T)

  if(is.list(temp) == T) {                                    # were two half-paths returned?
    ids <- c(rep(paste0("i", i), nrow(temp[[1]])),            # if so, make id's for both halves
             rep(paste0("j", i), nrow(temp[[2]])))
    temp <- as.data.frame(rbind(temp[[1]], temp[[2]]))        # combine two sets of points
    temp$id <- ids                                            # assign ids for plotting
  }
  ...

#+end_src
#+latex: \normalsize

* The plot

#+latex: \scriptsize
#+begin_src R :eval no :tangle yes :exports code
p <- ggplot()
p <- p + geom_polygon(aes(x = long, y = lat, group = group),               # world map
                      data = world, colour = "gray10", fill = "gray95")
p <- p + geom_line(aes(x = lon, y = lat, group = id),                      # great circles
                   dat = gcircles, lwd = 0.4, alpha = 0.5)
p <- p + geom_point(aes(x = lon, y = lat, size = sqrt(total/pi)),          # points
                    dat = talks_agg, colour = "#555599")
p <- p + scale_size("Total participants\n(both events)",                   # adjust legend
                    limits = c(0, max(sqrt(talks_agg$total / pi)) + 1),
                    breaks = sqrt(c(10, 50, 100) / pi),
                    labels = c(10, 50, 100), range = c(1, 10))
p <- p + theme_bw()                                                        # bw theme
p <- p + theme(axis.text = element_blank(), axis.title = element_blank(),  # tweak
               axis.ticks = element_blank(), panel.grid = element_blank(),
               legend.position = c(0.092, 0.15))
#+end_src
#+latex: \normalsize
* The result

#+name: great-circles
#+header: :file ./plots/great-circles.pdf :width 13 :height 7
#+begin_src R :session r :exports results :results output graphics :eval no :tangle yes

talks <- read.csv("./data/talk-locations.csv")
head(talks, 5)

talks$total <- talks$live + talks$rec
talks_agg <- ddply(talks, .(country, city), summarize,
                   total = sum(total), lat = lat[1], lon = lon[1])

start <- talks_agg[talks_agg$city == "Saint Paul", ]
end <- talks_agg[talks_agg$city != "Saint Paul", ]

# draw great circles from St. Paul to everywhere else
gcircles <- lapply(1:nrow(end), function(i) {
  temp <- gcIntermediate(start[, c("lon", "lat")], end[i, c("lon", "lat")],
                         n = 50, addStartEnd = T, breakAtDateLine = T)

  # if temp is a list, rbind and return single list
  if(is.list(temp) == T) {
    ids <- c(rep(paste0("i", i), nrow(temp[[1]])),
             rep(paste0("j", i), nrow(temp[[2]])))
    temp <- as.data.frame(rbind(temp[[1]], temp[[2]]))
    temp$id <- ids
  }

  else {
    ids <- rep(paste0("i", i), nrow(temp))
    temp <- as.data.frame(temp)
    temp$id <- ids
  }
  
  return(temp)
  
})

gcircles <- do.call(rbind, gcircles)

world <- map_data("world")
world <- world[world$lat > -57, ]

# initialize a ggplot object; need to do it this way since
# we're using independent layers that don't share same aes params
p <- ggplot()

# plot the world map
p <- p + geom_polygon(aes(x = long, y = lat, group = group),
                      data = world, colour = "gray10",
                      fill = "gray95")

# plot the great circles
p <- p + geom_line(aes(x = lon, y = lat, group = id),
                   dat = gcircles, lwd = 0.4, alpha = 0.5)

# plot points, sized by area
p <- p + geom_point(aes(x = lon, y = lat,
                    size = sqrt(total/pi)), dat = talks_agg,
                    colour = "#555599")

# set label for legend; rescale sizes/labels for area vs. diameter
p <- p + scale_size("Total participants\n(both events)",
                    limits = c(0, max(sqrt(talks_agg$total / pi)) + 1),
                    breaks = sqrt(c(10, 50, 100) / pi),
                    labels = c(10, 50, 100), range = c(1, 10))
p <- p + theme_bw()

# gets rid of axis text/ticks, moves legend to lower left vs. right side
p <- p + theme(axis.text = element_blank(),
               axis.title = element_blank(),
               axis.ticks = element_blank(),
               panel.grid = element_blank(),
               legend.position = c(0.092, 0.15))

p
#+end_src
#+latex: \normalsize


#+begin_center
#+attr_latex: :height 6.5cm
#+RESULTS: great-circles
[[file:./plots/great-circles.pdf]]
#+end_center

* Infographic

#+begin_center
#+attr_latex: :height 6.5cm
[[./img/infographic-flattened-lo.jpg]]
#+end_center

* Creating =.kml= files for Google Earth
- Pretty easy! (Follow along with [[http://www.nceas.ucsb.edu/scicomp/usecases/shapeFileToKML][this]], [[http://stackoverflow.com/questions/7813141/how-to-create-a-kml-file-using-r][this]], [[http://stackoverflow.com/questions/21487010/assistance-with-name-and-styleurl-in-kml-when-using-writeogr-from-rgdal][this]], and [[http://gsif.isric.org/doku.php?id=wiki:tutorial_plotkml][this]])

#+latex: \scriptsize
#+begin_src R :session r :exports code :results silent :eval no :tangle yes
talks_agg$size <- 100 * talks_agg$total

talks_sp <- talks_agg
coordinates(talks_sp) <- c("lon", "lat")                    # converts to spatial object
proj4string(talks_sp) <- CRS("+init=epsg:4238")             # G Earth coordinate system
talks_ll <- spTransform(talks_sp,
                        CRS("+proj=longlat +datum=WGS84"))  # Something else G Earth wants

# open a file connection and write the data with custom icon/size/label
kml_open("./data/talks-w-gcircles.kml")
kml_layer.SpatialPoints(talks_ll, colour = "white", labels = city, size = total,
                        shape="http://upload.wikimedia.org/wikipedia/commons/a/af/Tux.png")
kml_close("./data/talks-w-gcircles.kml")
#+end_src
#+latex: \normalsize

* Adding great circles

- A bit hackish, but manually writing the kml code works, too!

#+latex: \scriptsize
#+begin_src R :session r :exports code :results silent :eval no :tangle yes

# for each point set, generate the following kml syntax
gcircs <- lapply(1:nrow(end), function(i) {
  paste0("<Placemark><LineString><tesselate>1</tesselate><coordinates>",
         start$lon, ",", start$lat, " ", end[i, "lon"], ",", end[i, "lat"],
         "</coordinates></LineString></Placemark>") })

# combine the results into a single table
gcircs <- do.call(rbind, gcircs)

# print out each line of the above table
# retult can simply be pasted after last <Placemark> in .kml file
write.table(gcircs, row.names = F)

#+end_src
#+latex: \normalsize

* Another method for generation .kml				   :noexport:

#+latex: \scriptsize
#+begin_src R :session r :exports code :results silent :eval no :tangle yes

talks_agg$size <- 10 * (sqrt(talks_agg$total)/pi)

talks_sp <- talks_agg
coordinates(talks_sp) <- c("lon", "lat")
proj4string(talks_sp) <- CRS("+init=epsg:4238")
talks_ll <- spTransform(talks_sp,
                        CRS("+proj=longlat +datum=WGS84"))

kmlPoints(talks_ll["city"], kmlfile = "./data/talks-google-earth.kml",
          name = talks_ll$city,
          icon = "http://upload.wikimedia.org/wikipedia/commons/a/af/Tux.png")

#+end_src
#+latex: \normalsize
* =.kml= file in Google Earth

#+begin_center
#+attr_latex: :height 6.5cm
[[./img/talks-w-gcircles-kml.png]]
#+end_center

* Getting some GPS data

#+begin_center
[[https://play.google.com/store/apps/details?id=com.fivasim.androsensor&hl=en][_AndroSensor_]]
#+end_center

*** 							     :B_column:BMCOL:
   :PROPERTIES:
   :BEAMER_env: column
   :BEAMER_col: 0.45
   :END:
#+begin_center
#+attr_latex: :height 5cm
[[./img/andro-main.png]]
#+end_center

*** 							     :B_column:BMCOL:
   :PROPERTIES:
   :BEAMER_env: column
   :BEAMER_col: 0.45
   :END:
#+begin_center
#+attr_latex: :height 5cm
[[./img/andro-sensors.png]]
#+end_center

* Reading/cleaning the data

#+latex: \scriptsize
#+begin_src R :session r :exports both :results output :eval no
gps <- read.csv("./data/gps-data.csv", sep = ";")

# subset to columns we're interested in
gps <- gps[, c(10, 11, 13, 18)]

# give the columns sensical names
names(gps) <- c("lat", "lon", "speed", "time")
head(gps, 5)
#+end_src

#+RESULTS:
:        lat       lon speed time
: 1 44.92633 -93.09771    NA    5
: 2 44.92633 -93.09771    NA  505
: 3 44.92633 -93.09771    NA 1011
: 4 44.92633 -93.09771    NA 1532
: 5 44.92626 -93.09747     0 2032

#+latex: \normalsize

* Grab a background map						   :noexport:

#+latex: \scriptsize

#+name: gps-map
#+header: :file ./plots/gps-map.pdf :width 9 :height 4
#+begin_src R :session r :exports both :results output graphics :eval no :tangle yes
box <- c(left = min(gps$lon), bottom = min(gps$lat),
         right = max(gps$lon), top = max(gps$lat))

gps_map <- get_map(location = box, source = "stamen",
                   maptype = "terrain", crop = T)
#+end_src

#+begin_center
#+attr_latex: :height 4cm
#+RESULTS: gps-map
[[file:./plots/gps-map.pdf]]
#+end_center

* Plot path and speed over a map

#+latex: \scriptsize

#+name: gps-map-over
#+header: :file ./plots/gps-map-over.pdf :width 12 :height 5
#+begin_src R :session r :exports both :results output graphics :eval no :tangle yes
p <- ggmap(gps_map)
p <- p + geom_point(aes(x = lon, y = lat, colour = speed), data = gps, size = 3)
p <- p + scale_colour_continuous(low = "black", high = "red", na.value = NA)
#+end_src

#+begin_center
#+attr_latex: :height 5cm
#+RESULTS: gps-map-over
[[file:./plots/gps-map-over.pdf]]
#+end_center

#+latex: \normalsize

* Public transportation efficiency

- Background information can be found [[https://github.com/tcrug/public-transpo][here]]

#+latex: \scriptsize

#+name: transpo
#+begin_src R :session r :results silent :eval no :tangle yes
transpo <- read.csv("./data/public-transpo.csv")

transpo_agg <- ddply(transpo, .(city, state), summarize,                    # stats by state
                     btus_pmile_ave = mean(btus_pmile),
                     density = mean(population) / mean(service_area_sq_mi))
transpo_agg$lookup <- paste0(transpo_agg$city, ", ", transpo_agg$state)

coords <- geocode(transpo_agg$lookup)                                       # city/state string

transpo_agg <- cbind(transpo_agg, coords)                                   # get lat/lon

# let's not run that again...
write.table(transpo_agg, file = "./data/transpo-agg-geocoded.csv", row.names = F, sep = ",")
#+end_src
#+latex: \normalsize

* Efficiency visualized						   :noexport:

#+latex: \scriptsize

#+name: transpo-plot
#+header: :file ./plots/transpo-plot.pdf :width 11 :height 6
#+begin_src R :session r :results output graphics :exports both :eval no :tangle yes
plot <- read.csv("./data/transpo-agg-geocoded.csv")
plot <- plot[plot$state != "AK" & plot$state != "HI", ]
usa <- map_data("state")
plot <- plot[order(plot$btus_pmile_ave), ]
p <- ggplot() + geom_polygon(aes(x = long, y = lat, group = group),
                             data = usa, fill = "gray95", colour = "gray10")
p <- p + geom_point(aes(x = lon, y = lat, colour = btus_pmile_ave,
                    size = sqrt(density)/pi), data = plot)
p <- p + scale_colour_gradient("BTUs / passenger-mile", trans = "log")
p <- p + scale_x_continuous("") + scale_y_continuous("")
p <- p + scale_size_continuous("Passengers / Sq. Mile", breaks = c(10, 20, 30, 40),
                               labels = round((c(10, 20, 30, 40)*pi)^2, 0),
                               range = c(1, 8))
p <- p + theme_bw() + theme(axis.text = element_blank(), axis.ticks = element_blank())
#+end_src

#+latex: \normalsize

* Efficiency visualized

#+begin_center
#+attr_latex: :height 6.5cm
#+RESULTS: transpo-plot
[[file:./plots/transpo-plot.pdf]]
#+end_center

#+latex: \normalsize

* Converting data to =.json= for d3
- R is an excellent environment for working with data
  - Reshape (wide \leftrightarrow long)
  - Calculate columns
  - Summarize, e.g. with =ddply=
- Manipulate in R, output to =.json= with [[http://theweiluo.wordpress.com/2011/09/30/r-to-json-for-d3-js-and-protovis/][this]] or =jsonlite= [[http://cran.r-project.org/web/packages/jsonlite/][package]]

#+latex: \scriptsize
#+begin_src R :session r :exports code :results silent :eval no

library(jsonlite)
plot_json <- toJSON(plot)              # convert with jsonlite
file_con <- file("./d3/transpo.json")  # create file
writeLines(plot_json, file_con)        # write results to file
close(file_con)
#+end_src
#+latex: \normalsize

#+latex: \scriptsize
#+begin_src R :session r :exports code :results silent :eval no :tangle yes
[ { "city" : "Abilene", "state" : "TX", "btus_pmile_ave" : 13574.1, "density" : 2547.39,
    "lookup" : "Abilene, TX", "lon" : -99.73, "lat" : 32.45 }, ...
#+end_src 
#+latex: \normalsize
* And voil\(\`{a}\), a d3 version!

#+begin_center
#+attr_latex: :height 6.5cm
[[./img/transpo-d3.png]]
#+end_center

* Visualizing work activity
- Tracked work projects with [[https://play.google.com/store/apps/details?id=com.rauscha.apps.timesheet][Timesheet]] (projects, tags, location)

#+latex: \scriptsize
#+header: :file ./plots/mmm-timesheet.pdf :height 6 :width 7
#+begin_src R :session r :exports code :results output graphics :eval no :tangle yes

time <- read.csv("./data/timesheet.csv")              # read data
time <- ddply(time, .(Location), summarize,           # total time per loc
              total = sum(Duration)) 

# figure out building coords and merge with timesheet data
bldgs <- data.frame(loc = time$Location))
bldgs$lat <-  c(44.9515, 44.9576, 44.9525, 44.9545, 44.9577, 44.955,  44.9512, 44.9619, 44.9585)
bldgs$lon <- -c(93.0033, 92.9935, 92.9955, 92.9982, 92.9998, 92.9897, 93.0009, 93.00,   92.9942)
time <- merge(time, bldgs, by.x = "Location", by.y = "loc")

# line from my building to each of the other ones
lines <- data.frame(lat = c(rep(bldgs[2, "lat"], 8), bldgs[c(1, 3:9), "lat"]),
                    lon = c(rep(bldgs[2, "lon"], 8), bldgs[c(1, 3:9), "lon"]), grp = rep(1:8, 2))
#+end_src
#+latex: \normalsize


#+latex: \scriptsize
#+header: :file ./plots/mmm-timesheet.pdf :height 6 :width 7
#+begin_src R :session r :exports none :results output graphics :eval no :tangle yes

time <- read.csv("./data/timesheet.csv")              # read data
time <- time[!is.na(time$Location), ]                 # remove entries w/ no loc
mmm_box <- c(left = -93.0053, bottom = 44.9485,       # bounding box
             right = -92.9844, top = 44.9632)
mmm <- get_map(location = mmm_box, source = "stamen", # get map
               maptype = "toner", crop = T)

time <- ddply(time, .(Location), summarize,           # total time per loc
              total = sum(Duration)) 

# figure out building coords and merge with timesheet data
bldgs <- data.frame(loc = time$Location))
bldgs$lat <-  c(44.9515, 44.9576, 44.9525, 44.9545, 44.9577, 44.955,  44.9512, 44.9619, 44.9585)
bldgs$lon <- -c(93.0033, 92.9935, 92.9955, 92.9982, 92.9998, 92.9897, 93.0009, 93.00,   92.9942)
time <- merge(time, bldgs, by.x = "Location", by.y = "loc")

# line from my main building to each of the other ones
lines <- data.frame(lat = c(rep(bldgs[2, "lat"], 8), bldgs[c(1, 3:9), "lat"]),
                    lon = c(rep(bldgs[2, "lon"], 8), bldgs[c(1, 3:9), "lon"]),
                    grp = rep(1:8, 2))

p <- ggmap(mmm)
p <- p + geom_line(aes(x = lon, y = lat, group = grp),
                   data = lines, colour = "steelblue")
p <- p + geom_point(aes(x = lon, y = lat, size = sqrt(total)/pi),
                    data = time, fill = "steelblue", colour = "black", pch = 21)
p <- p + scale_x_continuous("") + scale_y_continuous("")
p <- p + scale_size_continuous("Hours", breaks = c(0.5, 1, 1.5, 2),
                               labels = c(2.5, 10, 20, 40), range = c(2, 6))
p <- p + theme_bw() + theme(axis.text = element_blank(), axis.ticks = element_blank())
p
#+end_src
#+latex: \normalsize

* Visualizing work activity

#+begin_center
#+attr_latex: :height 6.7cm
#+RESULTS:
[[file:./plots/mmm-timesheet.pdf]]
#+end_center

* =R= packages used

- Getting coordinates/working with Google: =ggmap=
- Great circle paths: =geosphere=
- Larger scale maps: =maps=
- Projection conversion/KML output: =rgdal=, =maptools=, =sp=, and =plotKML=
- Summary computations on data: =ddply()= function from =plyr=
- Reshaping data (wide \leftrightarrow long): =reshape2=
- Plotting: =ggplot2=

* References

- [[http://stat405.had.co.nz/ggmap.pdf][ggmap: Spatial Visualization with ggplot2]], Kahle \& Wickham
- [[http://uchicagoconsulting.wordpress.com/2011/04/18/how-to-draw-good-looking-maps-in-r/][How to draw good looking maps in R]], uchicagoconsulting
- [[http://www.stanford.edu/~cengel/cgi-bin/anthrospace/great-circles-on-a-recentered-worldmap-in-ggplot][Great circles on a recentered worldmap]], AnthroSpace
- [[http://flowingdata.com/2011/05/11/how-to-map-connections-with-great-circles/][How to map connections with great circles]], FlowingData
- [[http://stackoverflow.com/questions/21487010/assistance-with-name-and-styleurl-in-kml-when-using-writeogr-from-rgdal][SO question on creating =.kml= files]]
- For any given package, find the documentation on [[http://cran.r-project.org/][CRAN]]

\vspace{0.5cm}

Code and files from this presentation are on [[https://github.com/jwhendy/devFest-geo][github]]!

* Tools

Presentation made entirely with open source software!

#+begin_center
#+attr_latex: :booktabs nil
| <10>       | <10>       | <10>       | <10>       |
| \includegraphics[height=1.5cm]{./img/emacs.png} | \includegraphics[height=1.5cm]{./img/org-mode.png} | \includegraphics[height=1.5cm]{./img/r.png} | \includegraphics[height=1.5cm]{./img/arch.png} |
#+end_center

- [[http://www.gnu.org/software/emacs/][Emacs]] and [[http://orgmode.org/][Org-mode]] for reproducible code environment
- [[http://www.latex-project.org/][\LaTeX]] / [[http://www.ctan.org/tex-archive/macros/latex/contrib/beamer/][Beamer]] for typesetting
- [[http://blog.barisione.org/2007-09/torino-a-pretty-theme-for-latex-beamer/][Torino]] Beamer theme so that it wasn't obvious I was using Beamer
* 

#+latex: \LARGE
#+begin_center
Questions?
#+end_center
 
